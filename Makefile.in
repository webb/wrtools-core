#############################################################################
# Don't touch these...
#############################################################################

this_makefile := ${lastword ${MAKEFILE_LIST}}
SHELL = @bash@ -o pipefail -o errexit -o nounset
.SECONDARY:

#############################################################################
# things to set / override
#############################################################################

#HELP:Build for @PACKAGE_NAME@ (@PACKAGE_TARNAME@)

src_dir = @abs_srcdir@/src
build_dir = @abs_builddir@/build
prefix = @prefix@
PACKAGE_TARNAME = @PACKAGE_TARNAME@

# PROGRAMS
# autoconf names
MKDIR_P = @MKDIR_P@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
SED = @SED@
# other names
find = @find@
git = git
zip = zip
stow = stow

config_files = @config_files@

src_files_default := ${shell ${find} ${src_dir} -type f ! -name '*~'}
src_files = ${src_files_default}
all_files = ${src_files:${src_dir}/%=${build_dir}/%}
install_files = ${src_files:${src_dir}/%=${prefix}/%}

# ensure share directory name matches package name
ifneq (,${filter-out ${src_dir}/share/${PACKAGE_TARNAME}/%,${filter ${src_dir}/share/%,${src_files}}})
${error Source share directory name does not match package name}
endif

#############################################################################
#HELP:Default target is "all". Targets include:
.DEFAULT_GOAL = all

.PHONY: all #   Build everything
all: ${all_files}

.PHONY: install #   Install to $prefix (default "@prefix@")
install: ${install_files}

.PHONY: uninstall #   Remove installed files
uninstall:
	${RM} ${install_files}

.PHONY: clean #   Clean build products
clean:
	${RM} -r ${all_files}

.PHONY: distclean #   Clean all products
distclean: clean
	${RM} ${config_files} config.log config.status

#############################################################################
# all

${build_dir}/%: ${src_dir}/%
	${MKDIR_P} ${dir $@}
	${INSTALL_DATA} -- $< $@

#############################################################################
# install

${prefix}/bin/%: ${build_dir}/bin/%
	@ ${MKDIR_P} -- ${dir $@}
	${INSTALL_PROGRAM} -- $< $@

${prefix}/%: ${build_dir}/%
	@ ${MKDIR_P} -- ${dir $@}
	${INSTALL_DATA} -- $< $@

#############################################################################
# zip

dist_name_default := ${PACKAGE_TARNAME}-${shell ${git} describe --always --tags}
dist_name = ${dist_name_default}

.PHONY: zip #   Create a zip archive
zip:
	${RM} -r ${build_dir}/${dist_name} ${build_dir}
	${MAKE}
	${MAKE} install prefix=${build_dir}/${dist_name}
	( cd ${build_dir} && ${zip} -9 -r ${dist_name}.zip ${dist_name} )

#############################################################################
# stow

.PHONY: stow #   Install using GNU Stow (via default "@prefix@/stow/@PACKAGE_TARNAME@")
stow:
	${MAKE}
	${MAKE} install prefix=${prefix}/stow/${PACKAGE_TARNAME}
	${stow} -d ${prefix}/stow -t ${prefix} --stow --verbose --no-folding ${PACKAGE_TARNAME}

.PHONY: unstow #   Uninstall a GNU Stow installation
unstow:
	${stow} -d ${prefix}/stow -t ${prefix} --delete --verbose --no-folding ${PACKAGE_TARNAME}
	${MAKE} uninstall prefix=${prefix}/stow/${PACKAGE_TARNAME}
	${RM} -r ${prefix}/stow/${PACKAGE_TARNAME}

#############################################################################
# make help: this must be the last target

.PHONY: help #   Print this help
help:
	@ ${SED} -e '/^\.PHONY:/s/^\.PHONY: *\([^ #]*\) *\#\( *\)\([^ ].*\)/\2\1: \3/p;/^[^#]*#HELP:/s/[^#]*#HELP:\(.*\)/\1/p;d' ${this_makefile}

# don't put anything after this
