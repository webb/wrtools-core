#!/usr/bin/env bash

# Copyright 2015 Georgia Tech Research Corporation (GTRC). All rights reserved.

# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.

# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.

# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

#HELP:COMMAND_NAME: convert a set of strings into tokenized values, one per line
#HELP:Usage: COMMAND_NAME $string1 $string2 ...

set -o nounset -o errexit

root_dir=$(dirname "$0")/..
. "$root_dir"/share/wrtools-core/opt_help.bash
. "$root_dir"/share/wrtools-core/opt_verbose.bash
. "$root_dir"/share/wrtools-core/fail.bash

#HELP:Options:
#HELP:  --help | -h: Print this help
#HELP:  --verbose, -v: Print additional diagnostics

#HELP:  --input-separator=$char | -i $char: tokenize input as separated by $char
#HELP:      Default is blank (''), which does not tokenize input
default_input_separator=''
unset input_separator
opt_input_separator () {
    [[ ${input_separator+is-set} != is-set ]] || fail "option --input-separator may only occur once" 
    (( $# == 1 )) || fail "function $FUNCNAME requires 1 arg (got $#)"
    (( ${#1} <= 1 )) || fail "input separator must be a empty or a single character (got ${#1})"
    input_separator="$1"
}

#HELP:  --output-separator=$string | -o $string: on output, separate tokens by $string
#HELP:      Default is newline. Use ':' for PATHs
default_output_separator=$'\n'
unset output_separator
opt_output_separator () {
    [[ ${output_separator+is-set} != is-set ]] || fail "option --output-separator may be used only once" 
    [[ $output_null = false ]] || fail "Only one of options --output-null and --input-separator may be used."
    (( $# == 1 )) || fail "function $FUNCNAME requires 1 arg (got $#)"
    output_separator="$1"
}

#HELP:  --output-null | -0: on output, separate tokens by NULL (\0)
output_null=false
opt_output_null () {
    [[ ${output_separator+is-set} != is-set ]] || fail "Only one of options --output-null and --input-separator may be used."
    [[ $output_null = false ]] || fail "Option --output-null may be used only once."
    (( $# == 0 )) || fail "function $FUNCNAME requires 0 args (got $#)"
    output_null=true
}

OPTIND=1
while getopts :0hi:o:v-: option
do case "$option" in
       0 ) opt_output_null;;
       h ) opt_help;;
       i ) opt_input_separator "$OPTARG";;
       o ) opt_output_separator "$OPTARG";;
       v ) opt_verbose;;
       - ) case "$OPTARG" in
               help ) opt_help;;
               input-separator=* ) opt_input_separator "${OPTARG#*=}";;
               output-separator=* ) opt_output_separator "${OPTARG#*=}";;
               output-null ) opt_output_null;;
               verbose ) opt_verbose;;
               help=* \
                 | output-null=* \
                 | verbose=* ) fail "Long option \"${OPTARG%%=*}\" has unexpected argument";;
               input-separator \
                 | output-separator ) fail "Argument required for long option \"$OPTARG\"";;
               * ) fail "Unknown long option \"${OPTARG%%=*}\"";;
            esac;;
        '?' ) fail "Unknown short option \"$OPTARG\"";;
        : ) fail "Short option \"$OPTARG\" missing argument";;
        * ) fail_assert "Bad state in getopts (OPTARG=\"$OPTARG\")";;
   esac
done
shift $((OPTIND-1))

if [[ ${input_separator+is-set} != is-set ]]
then vecho Using default input separator
     input_separator=$default_input_separator
fi

if [[ ${output_separator+is-set} != is-set ]]
then vecho Using default output separator
     output_separator=$default_output_separator
fi

has_printed=false
print_separated () {
    (( $# == 1 )) || fail "$FUNCNAME must have 1 arg"
    if [[ $has_printed = true ]]
    then if [[ $output_null = true ]]
         then printf '\0'
         else printf "%s" "$output_separator"
         fi
    fi
    printf "%s" "$1"
    has_printed=true
}

for string in "$@"
do if [[ $input_separator = "" ]]
   then print_separated "$string"
   else while read -r -d "$input_separator"
        do print_separated "$REPLY"
        done <<< "$string$input_separator"
   fi
done
