#!/bin/bash

# Copyright 2015 Georgia Tech Research Corporation (GTRC). All rights reserved.

# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.

# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.

# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

#HELP:COMMAND_NAME: Check that files are XML documents
#HELP:Usage: COMMAND_NAME $file $file ...

set -o nounset -o errexit

root_dir=$(dirname "$0")/..
. "$root_dir"/share/wrtools-core/opt_help.bash
. "$root_dir"/share/wrtools-core/opt_verbose.bash
. "$root_dir"/share/wrtools-core/fail.bash
. "$root_dir"/share/wrtools-core/paranoia.bash
. "$root_dir"/share/wrtools-core/temp.bash

#HELP:Options:
#HELP:  --help | -h: Print this help
#HELP:  --verbose, -v: Print additional diagnostics
#HELP:  --not-paranoid: Omit basic/foundational validations

OPTIND=1
while getopts :hi:o:v-: option
do case "$option" in
       h ) opt_help;;
       v ) opt_verbose;;
       - ) case "$OPTARG" in
               help ) opt_help;;
               not-paranoid ) opt_not_paranoid;;
               verbose ) opt_verbose;;
               help=* | not-paranoid=* | verbose=* )
                   fail "Long option \"${OPTARG%%=*}\" has unexpected argument";;
               * ) fail "Unknown long option \"${OPTARG%%=*}\"";;
            esac;;
        '?' ) fail "Unknown short option \"$OPTARG\"";;
        : ) fail "Short option \"$OPTARG\" missing argument";;
        * ) fail_assert "Bad state in getopts (OPTARG=\"$OPTARG\")";;
   esac
done
shift $((OPTIND-1))

exit_status=0
temp_make_file output

for file in "$@"
do vecho "checking \"$file\""
   if is_paranoid
   then if [[ ! -f $file ]]
        then print_fail "not a file: $file"
             exit_status=1
             continue
        fi
   fi
   if ! test-run --stdout=/dev/null --stderr=/dev/null --exit-status=0 -- xmllint --noout "$file" > "$output"
   then printf "not an XML file: $file"
        exit_status=1
        cat "$output"
        continue
   fi
done

exit $exit_status

   
